pipeline {
    agent {
        kubernetes {
            label 'molgenis-jdk11'
        }
    }
    environment {
        LOCAL_REPOSITORY = "${LOCAL_REGISTRY}/molgenis/molgenis-app"
        CHART_VERSION = '1.3.0'
        BRANCH_NAME = 'master'
        TIMESTAMP = sh(returnStdout: true, script: "date -u +'%F_%H-%M-%S'").trim()
    }
    triggers {
        cron('H 1 * * 1-5')
    }
    stages {
        stage('Prepare [ nightly ]') {
            steps {
                container('vault') {
                    script {
                        sh "mkdir /home/jenkins/.m2"
                        sh "mkdir /home/jenkins/.rancher"
                        sh(script: 'vault read -field=value secret/ops/jenkins/rancher/cli2.json > /home/jenkins/.rancher/cli2.json')
                        sh(script: 'vault read -field=value secret/ops/jenkins/maven/settings.xml > /home/jenkins/.m2/settings.xml')
                        env.SONAR_TOKEN = sh(script: 'vault read -field=value secret/ops/token/sonar', returnStdout: true)
                        env.GITHUB_TOKEN = sh(script: 'vault read -field=value secret/ops/token/github', returnStdout: true)
                        env.CODECOV_TOKEN = sh(script: 'vault read -field=value secret/ops/token/codecov', returnStdout: true)
                        env.TAG = "nightly-${TIMESTAMP}"
                    }
                }
                checkout scm: [$class: 'GitSCM', branches: [[name: "*/${env.BRANCH_NAME}"]], userRemoteConfigs: [[credentialsId: 'molgenis-jenkins-github-secret', url: 'https://github.com/molgenis/molgenis']]]
            }
        }
        stage('Build [ nightly ]') {
            steps {
                container('maven') {
                    sh "mvn -q -B clean install -Dmaven.test.redirectTestOutputToFile=true -DskipITs -T4"
                }
            }
        }
        stage('Test [ nightly ]') {
            steps {
                container('maven') {
                    sh "mvn -q -B site"
                }
            }
        }
        stage('Package [ nightly ]') {
            steps {
                container('maven') {
                    dir('molgenis-app') {
                        sh "mvn -q -B dockerfile:build dockerfile:tag dockerfile:push -Ddockerfile.tag=${TAG} -Ddockerfile.repository=${LOCAL_REPOSITORY}"
                    }
                }
            }
        }
        stage('Deploy [ nightly.molgenis.org ]') {
            steps {
                container('rancher') {
                    sh "rancher context switch prod-molgenis"
                    sh "rancher apps upgrade --set image.tag=${TAG} nightly ${CHART_VERSION}"
                }
            }
        }
    }
    post {
        success {
            hubotSend(message: 'Build success', status: 'INFO', site: 'slack-general')
        }
        failure {
            hubotSend(message: 'Build failed', status: 'ERROR', site: 'slack-general')
        }
    }
}