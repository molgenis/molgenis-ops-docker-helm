pipeline {
    agent {
        kubernetes {
            label 'molgenis-jdk11'
        }
    }
    environment {
        BRANCH_NAME = 'master'
        TIMESTAMP = sh(returnStdout: true, script: "date -u +'%F-%H-%M-%S'").trim()
        DOWNLOAD_SERVER = 'https://molgenis26.gcc.rug.nl/releases/data'
    }
    triggers {
        cron('H 1 * * 1-5')
    }
    stages {
        stage('Prepare [ e2e ]') {
            steps {
                container('vault') {
                    script {
                        sh "mkdir /home/jenkins/.m2"
                        sh "mkdir /home/jenkins/.rancher"
                        sh(script: 'vault read -field=value secret/ops/jenkins/rancher/cli2.json > /home/jenkins/.rancher/cli2.json')
                        sh(script: 'vault read -field=value secret/ops/jenkins/maven/settings.xml > /home/jenkins/.m2/settings.xml')
                        env.PUBLIC_DATA_USERNAME = sh(script: 'vault read -field=username secret/dev/account/public-data.dev.molgenis.org', returnStdout: true)
                        env.PUBLIC_DATA_PASSWORD = sh(script: 'vault read -field=password secret/dev/account/public-data.dev.molgenis.org', returnStdout: true)
                        env.GITHUB_TOKEN = sh(script: 'vault read -field=value secret/ops/token/github', returnStdout: true)
                        env.MOLGENIS_TEST_UPLOAD_FOLDER = sh(script: 'pwd', returnStdout: true).trim() + "/molgenis-api-tests/"
                        env.REST_TEST_ADMIN_NAME = sh(script: 'vault read -field=username secret/dev/account/e2e.dev.molgenis.org', returnStdout: true)
                        env.REST_TEST_ADMIN_PW = sh(script: 'vault read -field=password secret/dev/account/e2e.dev.molgenis.org', returnStdout: true)
                        env.TAG = "e2e-${TIMESTAMP}"
                        env.REST_TEST_HOST = "http://${TAG}-molgenis.molgenis-${TAG}:8080"
                    }
                }
                checkout scm: [$class: 'GitSCM', branches: [[name: "*/${env.BRANCH_NAME}"]], userRemoteConfigs: [[credentialsId: 'molgenis-jenkins-github-secret', url: 'https://github.com/molgenis/molgenis']]]
            }
        }
        stage('Deploy [ e2e ]') {
            steps {
                container('rancher') {
                    sh "rancher context switch dev-molgenis"
                    sh "rancher apps install " +
                            "-n molgenis-${TAG} " +
                            "molgenis " +
                            "${TAG} " +
                            "--no-prompt " +
                            "--set adminPassword=${REST_TEST_ADMIN_PW} " +
                            "--set environment=dev " +
                            "--set image.tag=dev " +
                            "--set image.repository=${LOCAL_REGISTRY} " +
                            "--set image.pullPolicy=Always " +
                            "--set resources.limits.cpu=8 " +
                            "--set resources.limits.memory=8Gi"
                }
            }
        }
        stage('Build [ e2e ]') {
            steps {
                container('maven') {
                    sh "mvn -q -B clean install -Dmaven.test.redirectTestOutputToFile=true -DskipITs -T4"
                }
            }
        }
        stage('Tests [ e2e ]') {
            stages {
                stage('Public upload tests') {
                    parallel {
                        stage("BBMRI-Eric") {
                            environment {
                                MOLGENIS_TEST_UPLOAD_FILE = 'bbmri-eric-acc.xlsx'
                                MOLGENIS_TEST_UPLOAD_CHECK_URLS = 'menu/main/dataexplorer?entity=eu_bbmri_eric_collections'
                                MOLGENIS_TEST_UPLOAD_PACKAGE_TO_REMOVE = 'eu_bbmri_eric'
                            }
                            steps {
                                container('maven') {
                                    dir("molgenis-api-tests") {
                                        sh "curl -u '${PUBLIC_DATA_USERNAME}:${PUBLIC_DATA_PASSWORD}' ${DOWNLOAD_SERVER}/${MOLGENIS_TEST_UPLOAD_FILE} --output ${MOLGENIS_TEST_UPLOAD_FILE}"
                                        sh "mvn test -Dtest=ImportPublicDataIT"
                                    }
                                }
                            }
                        }
                        stage("BBMRI-NL") {
                            environment {
                                MOLGENIS_TEST_UPLOAD_FILE = 'bbmri-nl-acc.xlsx'
                                MOLGENIS_TEST_UPLOAD_CHECK_URLS = 'menu/main/dataexplorer?entity=bbmri_nl_sample_collections'
                                MOLGENIS_TEST_UPLOAD_PACKAGE_TO_REMOVE = 'bbmri_nl'
                            }
                            steps {
                                container('maven') {
                                    dir("molgenis-api-tests") {
                                        sh "curl -u '${PUBLIC_DATA_USERNAME}:${PUBLIC_DATA_PASSWORD}' ${DOWNLOAD_SERVER}/${MOLGENIS_TEST_UPLOAD_FILE} --output ${MOLGENIS_TEST_UPLOAD_FILE}"
                                        sh "mvn test -Dtest=ImportPublicDataIT"
                                    }
                                }
                            }
                        }
                        stage("COL7A1") {
                            environment {
                                MOLGENIS_TEST_UPLOAD_FILE = 'col7-a1-acc.xlsx'
                                MOLGENIS_TEST_UPLOAD_CHECK_URLS = 'menu/main/dataexplorer?entity=col7a1_Patients'
                                MOLGENIS_TEST_UPLOAD_PACKAGE_TO_REMOVE = 'col7a1'
                            }
                            steps {
                                container('maven') {
                                    dir("molgenis-api-tests") {
                                        sh "curl -u '${PUBLIC_DATA_USERNAME}:${PUBLIC_DATA_PASSWORD}' ${DOWNLOAD_SERVER}/${MOLGENIS_TEST_UPLOAD_FILE} --output ${MOLGENIS_TEST_UPLOAD_FILE}"
                                        sh "mvn test -Dtest=ImportPublicDataIT"
                                    }
                                }
                            }
                        }
                        stage("CHD7") {
                            environment {
                                MOLGENIS_TEST_UPLOAD_FILE = 'chd7-acc.xlsx'
                                MOLGENIS_TEST_UPLOAD_CHECK_URLS = 'menu/main/dataexplorer?entity=CHD7_Patients'
                                MOLGENIS_TEST_UPLOAD_PACKAGE_TO_REMOVE = 'CHD7'
                            }
                            steps {
                                container('maven') {
                                    dir("molgenis-api-tests") {
                                        sh "curl -u '${PUBLIC_DATA_USERNAME}:${PUBLIC_DATA_PASSWORD}' ${DOWNLOAD_SERVER}/${MOLGENIS_TEST_UPLOAD_FILE} --output ${MOLGENIS_TEST_UPLOAD_FILE}"
                                        sh "mvn test -Dtest=ImportPublicDataIT"
                                    }
                                }
                            }
                        }
                        // the test below host their data on the molgenis-repository until further notice
                        stage("Chromosome6") {
                            environment {
                                MOLGENIS_TEST_UPLOAD_FILE = 'chr6-questionnaire-acc.xlsx'
                                MOLGENIS_TEST_UPLOAD_CHECK_URLS = 'menu/main/dataexplorer?entity=c6_questionnaire'
                                MOLGENIS_TEST_UPLOAD_PACKAGE_TO_REMOVE = 'c6'
                            }
                            steps {
                                container('maven') {
                                    dir("molgenis-api-tests") {
                                        sh "curl -u '${PUBLIC_DATA_USERNAME}:${PUBLIC_DATA_PASSWORD}' ${DOWNLOAD_SERVER}/${MOLGENIS_TEST_UPLOAD_FILE} --output ${MOLGENIS_TEST_UPLOAD_FILE}"
                                        sh "mvn test -Dtest=ImportPublicDataIT"
                                    }
                                }
                            }
                        }
                        stage("GoNL") {
                            environment {
                                MOLGENIS_TEST_UPLOAD_FILE = 'gonl_chr16_snps_indels_r5.vcf'
                                MOLGENIS_TEST_UPLOAD_CHECK_URLS = 'menu/main/dataexplorer?entity\\=gonlchr16snps_indel,menu/main/dataexplorer?entity\\=gonlchr16snps_indelSample'
                                MOLGENIS_TEST_UPLOAD_PACKAGE_TO_REMOVE = 'gonl_chr16_snps_indels_r5,gonl_chr16_snps_indels_r5Sample'
                            }
                            steps {
                                container('maven') {
                                    dir("molgenis-api-tests") {
                                        sh "curl -u '${PUBLIC_DATA_USERNAME}:${PUBLIC_DATA_PASSWORD}' ${DOWNLOAD_SERVER}/${MOLGENIS_TEST_UPLOAD_FILE} --output ${MOLGENIS_TEST_UPLOAD_FILE}"
                                        sh "mvn test -Dtest=ImportPublicDataIT"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            container('rancher') {
                sh "rancher context switch dev-molgenis"
                sh "rancher apps delete ${TAG}"
            }
        }
        unstable {
            hubotSend message: ':warning: Build unstable', site: 'slack-general', status: 'ABORTED'
        }
        failure {
            hubotSend message: ':x: Build failed', site: 'slack-general', status: 'ERROR'
        }
    }
}
